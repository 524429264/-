HTTP是基于TCP/TP协议的应用层协议。它不涉及数据包传输，主要规定了客户端和服务器之间的通信格式，默认使用80端口

1、SSL协议的握手过程
开始加密通信之前，客户端和服务器首先必须建立连接和交换参数，这个过程叫做握手

握手阶段分成5步：
第一步，客户端给出协议版本号、一个客户端生成的随机数（Client random），以及客户端支持的加密方法。
第二步，服务器确认双方使用的加密方法，并给出数字证书、以及一个服务器生成的随机数（Server random）。
第三步，客户端确认数字证书有效，然后生成一个新的随机数（Premaster secret），并使用数字证书中的公钥，加密这个随机数，发给服务器。
第四步，服务器使用自己的私钥，获取爱丽丝发来的随机数（即Premaster secret）。
第五步，客户端和服务器根据约定的加密方法，使用前面的三个随机数，生成"对话密钥"（session key），用来加密接下来的整个对话过程。


2、私钥的作用
握手阶段有三点需要注意
  - 生成对话密钥一共需要三个随机数
  - 握手之后的对话使用“对话密钥”加密（对称密钥），服务器的公钥和私钥只用于加密和解密“对话密钥”（非对称密钥），无其他作用
  - 服务器公钥放在服务器的数字整数之中

从上面的第二点可知，整个对话过程中（握手阶段和其后的对话），服务器的公钥和私钥只需要用到一次


3、DH算法的握手阶段
整个握手阶段都不加密（也没法加密），都是明文。因此，如果有人窃听通信，它可以知道双方选择的加密方法，以及三个随机数中的两个。整个通话的安全，只取决与第三个随机数能不能被破解

为了足够安全，把握手阶段的算法从默认的RSA算法，改为Diffie-Hellman算法。采用DH算法后，Premaster secret不需要传递，双发只要交换各自的参数，就可以算出这个随机数


4、session的恢复
握手阶段用来建立SSL连接。如果处于某种原因，对话中断，就需要重新握手

这时有两种方法可以恢复原来的session：一种叫做session ID，另一种叫做session ticket

session ID 的思想很简单，就是每一次对话都有一个编号（session ID）。如果对话中断，下次重连的时候，只要客户端给出这个编号，且服务器有这个编号，且服务器有这个编号的记录，双方就可以重新使用已有的“对话密钥”，而不必重新生成一把