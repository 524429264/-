	AMD

AMD是异步模块定义。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后没这个回调函数才会执行

AMD也采用require() 语句加载模块，但是不用与CommonJS，它要求两个参数：
require( [module] , callback ) ;
第一个参数是一个数组，里面的成员就是要加载的模块，第二个参数callback，则是加载成功之后的回调函数。

AMD比较适合浏览器环境


	require.js

主要解决了两个问题：
1、实现js文件的异步加载，避免网页失去响应
2、管理模块之间的依赖性，便于代码的编写和维护

1、使用require.js的第一步，是先去官方网站下载最新版本，下载后，假定把它放在js子目录下面，就可以加载了。
<script src="js/require.js" defer></script>

2、加载require.js之后下一步就要加载我们自己的代码，假定有一个main.js，也放在js目录下面，那么，只需要写成下面这样：
<script src="js/require.js" data-main="js/main"></script>
data-main属性的作用是，指定网页程序的主模块，在这里即是main.js，require.js默认的文件后缀名是js，所以上面把mian.js简写成了main

3、常见的情况是，主模块依赖于其他模块，这时就要使用AMD规范定的require() 函数，如：
require(['moduleA', 'moduleB', 'moduleC'], function (moduleA, moduleB, moduleC){
　　　　// some code here
});
主模块的代码就写在回调函数中

4、使用require.config() 方法，我们可以对模块的加载行为进行自定义。require.config() 就写在主模块( 在这里即main.js )的头部。参数就是一个对象，这个对象的paths属性指定各个模块的加载路径 。如：
require.config({
　　　　paths: {
　　　　　　"jquery": "jquery.min",
　　　　　　"underscore": "underscore.min",
　　　　　　"backbone": "backbone.min"
　　　　}
});

5、上面的代码给出了三个模块的文件名，路径默认与main.js在同一个目录。如果这些模块在其他目录，比如 js/lib 目录，则有两种写法
一种是逐一指定路径：
require.config({
　　　　paths: {
　　　　　　"jquery": "lib/jquery.min",
　　　　　　"underscore": "lib/underscore.min",
　　　　　　"backbone": "lib/backbone.min"
　　　　}
});
另一种是直接改变基目录：
require.config({
　　　　baseUrl: "js/lib",  // 在这里改变基目录
　　　　paths: {
　　　　　　"jquery": "jquery.min",
　　　　　　"underscore": "underscore.min",
　　　　　　"backbone": "backbone.min"
　　　　}
});
如果某个模块在另一台主机上 ，也可以直接指定它的网址：
require.config({
　　　　paths: {
　　　　　　"jquery": "https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min"
　　　　}
});

6、require.js要求，每个模块是一个单独的js文件。这样的话，如果加载对个模块，就会发出多次HTTP请求，这会影响网页的加载速度。所以require.js提供了一个优化工具，当部署完毕后，用该工具将多个模块合并在一个文件中，减少HTTP请求（http://requirejs.org/docs/optimization.html）

7、require.js加载的模块，采用AMD规范。即模块必须按照AMD的规定来写

8、具体来说，就是模块必须采取特定的define() 函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在define() 函数中。
如果这个模块还依赖其他的模块，那么define() 函数的第一个参数，必须是一个数组，指明该模块的依赖性

9、加载非规范的模块：这样的模块在用require() 加载之前，要先用require.config() 方法，定义它们的特征。require.config() 接受一个配置对象，这个对象除了有前面说过的paths属性之外，还有一个shim属性，专门用来配置不兼容的模块。具体来说每个模块要定义 (1)、exports值，即输出变量名，表明这个模块外部调用时的名称；(2)、deps数组，表明该模块的依赖性


	CMD

CMD中，一个模块就是一个文件，代码的书写格式如下：define( factory )

define 是一个全局函数，用来定义模块

define 接受一个factory参数，factory可以是一个函数，也可以是一个对象或字符串。
factoty为函数时，表示是模块的构造方法。执行构造方法，可以得到向外提供的接口

默认会传入三个参数： require、exports和module：
define ( function ( require , exports , module ){
   // 模块代码
} )

define ( id? , deps? , factory )
define也可以接受两个以上参数。字符串id表示模块标识，数组deps是模块依赖：
define ( 'hello' , ['jquery'] , function (require , exports , module){
   // 模块代码
} );

注意：带 id 和 deps 参数的 define 用法不属于 CMD 规范，而属于 Modules/Transport 规范。

define.cmd Object
一个空对象，可用来判定当前页面是否有CMD模块加载器
if (typeof define === "function" && define.cmd) {
   // 有Sea.js 等 CMD 模块加载器存在
}

require Function
require是factory函数的第一个参数

require require(id)
require是一个方法，接受模块标识作为唯一参数，用来获取其他模块提供的接口
define ( function (require , exports){
   // 获取模块 a 的接口
   var a=require('./a');

   // 调用模块 a 的方法
   a.doSomethings();
} ) ;

require.async   require.async(id,callback?)
require.async方法用来在模块内部异步加载模块，并在加载完成后执行指定回调。callback参数可选

require是同步往下执行，require.async则是异步回调执行，require.async一般用来加载可延迟异步加载的模块

require.resolve   require.resolve(id)
实用模块系统内部的路径解析机制来解析并返回模块路径。该函数不会加载模块，只返回解析后的绝对路径（这可以用来获取模块路径，一般用在插件环境或需动态拼接模块路径的场景下）

exports  Object
exports是一个对象，用来向外提供模块接口

除了给exports对象增加成员，还可以使用return直接向外提供接口，如果return语句是模块中的唯一代码，还可以进行一定的简化

注意：exports仅仅是module.exports的一个引用。在factory内部给exports重新赋值时，并不会改变module.exports的值。因此给exports赋值是无效的，不能用来更改模块的接口

module  Object
module是一个对象，上面存储了与当前模块相关联的一些属性和方法

module.id  String
模块的唯一标识

module.uri  String
根据模块系统的路径解析规则得到的模块绝对路径
define(function (require,exports,module){
            console.log(module.uri);
            // ==> http://example.com/path/to/this/file.js
});
一般情况下（没有define中手写id参数时），module.id的值就是module.uri，两者完全相同

module.dependencies  Array
dependencies是一个数组，表示当前模块的依赖

module.exports  Object
当前模块对外提供的接口
传给factory构造方法的exports参数是 module.exports对象的一个引用。只通过exports参数来提供接口，有时无法满足开发者的所有需求。比如当模块的接口是某个类的实例是，需要通过module.exports来实现

对module.exports的赋值需要同步执行，不能放在回调函数里
